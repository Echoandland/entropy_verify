{
  "Q1": {
    "o3": {
      "stage1_cates": "There are five solutions.  \nThey all use adjacent transpositions, but they reach the answer in three fundamentally different ways.\n\n──────────────────  \nGroup 1 – “Explicit step-by-step counting”  \nIdea: Physically move each letter through the word and add up the swaps it actually makes.\n\n• Solution 1 – counts 5+4+3+2+1 moves.  \n• Solution 4 – writes out every intermediate string and (implicitly) counts the same 5+4+3+2+1 moves.\n\n──────────────────  \nGroup 2 – “Recursive / triangular–number argument”  \nIdea: Observe or prove that the minimum number of swaps for length n is n(n-1)/2 (triangular numbers), often by stripping off the last letter and recursing.\n\n• Solution 2 – develops the 0,1,3,6,… pattern and gives the formula n(n-1)/2.  \n• Solution 3 – states the same recursive decomposition (move last letter, solve a shorter instance) and sums 0+1+…+5.\n\n──────────────────  \nGroup 3 – “Permutation inversion count”  \nIdea: Translate the word into a permutation and compute its total number of inversions; each inversion must be removed by one adjacent swap.\n\n• Solution 5 – maps ABCDEF→123456, FEDCBA→654321, counts 15 inversions directly.\n\nThus:\n\nGroup 1: Solutions 1, 4  \nGroup 2: Solutions 2, 3  \nGroup 3: Solution 5",
      "stage2_cates": "{1: \"Solution 1, Solution 4\", 2: \"Solution 2, Solution 3\", 3: \"Solution 5\"}",
      "cats": "[1,2,2,1,3]"
    }
  }
}